name: ML App CI/CD Pipeline

on:
  pull_request:
    branches: [ dev, staging, main ]
  push:
    branches: [ staging, main ]

env:
  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
  DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
  DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}

jobs:
  code-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"  # 优化：统一为 3.10，与 Docker 一致
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (代码格式化检查)
        run: black --check .

      - name: Run Ruff (静态分析)
        run: ruff check .

  test:
    runs-on: ubuntu-latest
    needs: code-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"  # 优化：统一版本
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Login to Dagshub (拉取DVC数据)
        run: |
          dagshub login --token $DAGSHUB_TOKEN

      - name: Pull DVC data (原始数据+清洗后数据)  # 优化：补充原始数据拉取
        run: |
          dvc remote add -d dagshub_remote https://dagshub.com/$DAGSHUB_USER/$DAGSHUB_REPO.git
          dvc pull data/raw/train_raw.csv.dvc  # 新增：拉取 train.py 所需的原始数据
          dvc pull data/processed.dvc          # 保留：拉取测试所需的处理后数据

      - name: Run pytest (执行所有测试用例)
        run: pytest app/tests/test_app.py -v

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Dagshub (拉取模型文件)  # 新增：拉取 mlruns 模型
        run: |
          dagshub login --token $DAGSHUB_TOKEN

      - name: Pull mlruns via DVC (模型文件)  # 新增：确保 Docker 构建时有 mlruns
        run: |
          dvc remote add -d dagshub_remote https://dagshub.com/$DAGSHUB_USER/$DAGSHUB_REPO.git
          dvc pull mlruns.dvc

      - name: Verify required files (路径验证)  # 新增：提前排查文件缺失
        run: |
          if [ ! -d "mlruns" ]; then
            echo "Error: mlruns directory not found!"
            exit 1
          fi
          if [ ! -f "data/raw/train_raw.csv" ]; then
            echo "Error: train_raw.csv not found!"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # PR 时仅验证构建
      - name: Build Docker image (PR validation)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ml-app:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 合并到 staging 构建 staging 镜像
      - name: Build & Tag Staging Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ml-app:staging-${{ github.sha[:8] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=staging

      # 合并到 main 构建 production 镜像
      - name: Build & Tag Production Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ml-app:prod-${{ github.sha[:8] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=production