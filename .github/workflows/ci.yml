name: ML App CI/CD Pipeline

# 触发条件：PR到protected分支（dev/staging/main）、合并到staging/main
on:
  pull_request:
    branches: [ dev, staging, main ]
  push:
    branches: [ staging, main ]

# 环境变量（可通过GitHub Secrets配置）
env:
  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
  DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
  DAGSHUB_REPO: ${{ secrets.DAGSHUB_REPO }}

jobs:
  # 任务1：代码检查（Lint + 静态分析）
  code-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"  # 缓存pip依赖

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (代码格式化检查)
        run: black --check .  # --check仅检查不修改，失败则CI报错

      - name: Run Ruff (静态分析)
        run: ruff check .  # 检查语法错误、未使用导入等

  # 任务2：运行测试套件
  test:
    runs-on: ubuntu-latest
    needs: code-check  # 依赖code-check任务完成
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Login to Dagshub (拉取DVC数据)
        run: |
          dagshub login --token $DAGSHUB_TOKEN

      - name: Pull DVC data (v2清洗后数据，用于测试)
        run: |
          dvc remote add -d dagshub_remote https://dagshub.com/$DAGSHUB_USER/$DAGSHUB_REPO.git
          dvc pull data/processed.dvc  # 拉取测试所需数据

      - name: Run pytest (执行所有测试用例)
        run: pytest app/tests/test_app.py -v  # 运行测试，失败则CI报错

  # 任务3：构建Docker镜像（PR时验证构建，合并时构建环境镜像）
  build-docker:
    runs-on: ubuntu-latest
    needs: test  # 依赖test任务通过
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤1：PR时仅验证镜像构建（不推送）
      - name: Build Docker image (PR validation)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false  # 不推送
          tags: ml-app:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 步骤2：合并到staging分支 → 构建staging环境镜像
      - name: Build & Tag Staging Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false  # 说明书要求无需部署，仅构建；如需推送，可配置Docker Hub Secrets
          tags: ml-app:staging-${{ github.sha[:8] }}  # 用Git Commit前8位打标签
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=staging  # 传递staging环境变量

      # 步骤3：合并到main分支 → 构建production环境镜像
      - name: Build & Tag Production Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false  # 如需推送，配置Docker Hub Secrets并设push=true
          tags: ml-app:prod-${{ github.sha[:8] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=production  # 传递production环境变量