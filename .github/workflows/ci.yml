name: ML App CI/CD

# 触发条件：PR到保护分支（dev/staging/main）、合并到staging/main
on:
  pull_request:
    branches: [dev, staging, main]  # PR到这些分支触发CI检查
  push:
    branches: [staging, main]       # 合并到这些分支触发CD构建

jobs:
  # 任务1：代码格式与规范检查（Lint）
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # 拉取代码到CI环境
      
      - name: 配置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"  # 与项目依赖的Python版本一致
      
      - name: 安装Lint工具依赖
        run: pip install black==24.8.0 ruff==0.4.10  # 锁定版本，避免与本地差异
      
      - name: 运行Black格式检查（强制统一代码风格）
        run: black --check .  # 仅检查不自动修复，不符合则CI失败
      
      - name: 运行Ruff静态分析（检查代码规范与错误）
        run: ruff check .  # 检查未使用导入、语法错误等，不符合则CI失败

  # 任务2：运行测试用例（确保功能正常）
  test:
    runs-on: ubuntu-latest
    needs: lint  # 依赖lint任务，Lint通过才运行测试
    steps:
      - uses: actions/checkout@v4
      
      - name: 配置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: 安装项目依赖
        run: pip install -r requirements.txt  # 安装测试所需依赖
      
      - name: 运行测试用例（带路径配置）
        run: |
          # 强制设置项目根目录到 PYTHONPATH，确保能导入 app 模块
          PYTHONPATH=/home/runner/work/APP/APP pytest app/tests/test_app.py -v -s

  # 任务3：构建Docker镜像（合并到staging/main时触发）
  build-docker:
    runs-on: ubuntu-latest
    needs: test  # 依赖test任务，测试通过才构建镜像
    if: github.event_name == 'push'  # 仅在合并到staging/main时执行
    steps:
      - uses: actions/checkout@v4
      
      - name: 设置环境变量（区分staging/prod）
        id: set-env
        run: |
          # 根据当前分支设置环境类型（staging或prod）
          if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "ENV=staging" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
          fi
      
      - name: 生成环境配置文件（.env）
        run: |
          # 从GitHub Secrets中读取对应环境的变量
          echo "MODEL_PATH=${{ secrets[format('{0}_MODEL_PATH', env.ENV)] }}" >> .env
          echo "PORT=${{ secrets[format('{0}_PORT', env.ENV)] }}" >> .env
          echo "LOG_LEVEL=${{ secrets[format('{0}_LOG_LEVEL', env.ENV)] }}" >> .env
      
      - name: 构建Docker镜像（带环境标签）
        run: |
          # 修正：用substring函数截取commit哈希前8位（GitHub Actions原生语法）
          docker build -t ml-app:${{ env.ENV }}-${{ substring(github.sha, 0, 8) }} .
      
      - name: 标记环境默认镜像（如staging/prod）
        run: |
          # 修正：同样使用substring函数
          docker tag ml-app:${{ env.ENV }}-${{ substring(github.sha, 0, 8) }} ml-app:${{ env.ENV }}