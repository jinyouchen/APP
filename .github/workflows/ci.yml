name: ML App CI/CD

# 触发条件：PR到保护分支（dev/staging/main）、合并到staging/main
on:
  pull_request:
    branches: [dev, staging, main]  # PR到这些分支触发CI检查
  push:
    branches: [staging, main]       # 合并到这些分支触发CD构建

jobs:
  # 任务1：代码格式与规范检查（Lint）
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # 拉取代码（含DVC配置文件 .dvc）
      
      - name: 配置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: 安装Lint工具依赖
        run: pip install black==24.8.0 ruff==0.4.10
      
      - name: 运行Black格式检查
        run: black --check .
      
      - name: 运行Ruff静态分析
        run: ruff check .

  # 任务2：运行测试用例（含DVC拉取模型）
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false  # 关闭Git LFS（如果不用）
      
      - name: 配置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      # 修正1：DVC远程配置语法错误（-f改为-d，拉取路径匹配实际.dvc文件）
      - name: 安装DVC并拉取模型
        run: |
          # 安装DVC
          pip install dvc==3.44.0
          # 配置DVC远程仓库（-d设置为默认远程，替代错误的-f）
          dvc remote add -d myremote ${{ secrets.DVC_REMOTE_URL }}
          # 配置DVC凭证
          dvc remote modify myremote --local auth basic
          dvc remote modify myremote --local user ${{ secrets.DVC_REMOTE_USER }}
          dvc remote modify myremote --local password ${{ secrets.DVC_REMOTE_PASSWORD }}
          # 拉取模型（路径改为实际生成的.dvc文件：data/model/model.pkl.dvc）
          dvc pull data/model/model.pkl.dvc
      
      # 新增步骤2：设置测试用的MODEL_PATH（指向拉取后的实际路径）
      - name: 设置测试环境变量
        run: |
          # 测试阶段用拉取后的本地路径（与dvc pull路径一致）
          echo "MODEL_PATH=data/model" >> $GITHUB_ENV
      
      - name: 安装项目依赖
        run: pip install -r requirements.txt  # 需包含 joblib、pytest、flask 等
      
      - name: 运行测试用例（确保PYTHONPATH和模型路径生效）
        run: |
          # 强制设置PYTHONPATH，同时使用测试环境变量中的MODEL_PATH
          PYTHONPATH=/home/runner/work/APP/APP pytest app/tests/test_app.py -v -s

  # 任务3：构建Docker镜像（合并到staging/main时触发）
  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
      
      # 步骤1：拉取模型数据（构建镜像需包含模型）
      - name: 安装DVC并拉取模型
        run: |
          pip install dvc==3.44.0
          dvc remote add -d myremote ${{ secrets.DVC_REMOTE_URL }}
          dvc remote modify myremote --local auth basic
          dvc remote modify myremote --local user ${{ secrets.DVC_REMOTE_USER }}
          dvc remote modify myremote --local password ${{ secrets.DVC_REMOTE_PASSWORD }}
          dvc pull data/model/model.pkl.dvc  # 与test任务路径保持一致
      
      - name: 设置环境变量（区分staging/prod）
        id: set-env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "ENV=staging" >> $GITHUB_ENV
            # 预发布环境用拉取后的本地路径
            echo "MODEL_PATH=data/model" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
            # 修正2：Secrets名称匹配（若实际为大写PROD_MODEL_PATH，需同步修改）
            echo "MODEL_PATH=${{ secrets.PROD_MODEL_PATH }}" >> $GITHUB_ENV
          fi
      
      - name: 生成环境配置文件（.env）
        run: |
          echo "MODEL_PATH=${{ env.MODEL_PATH }}" >> .env
          # 修正3：端口Secrets引用（与实际Secrets名称匹配，若为STAGING_PORT/PROD_PORT）
          echo "PORT=${{ secrets[format('{0}_PORT', env.ENV)] }}" >> .env
          # 修正4：移除未配置的LOG_LEVEL（若未设置对应Secrets，避免报错）
          # echo "LOG_LEVEL=${{ secrets[format('{0}_LOG_LEVEL', env.ENV)] }}" >> .env
      
      - name: 构建Docker镜像（带环境标签）
        run: |
          # 用shell截取commit哈希前8位
          SHA_SHORT=${GITHUB_SHA:0:8}
          docker build -t ml-app:${{ env.ENV }}-$SHA_SHORT .
      
      - name: 标记环境默认镜像
        run: |
          SHA_SHORT=${GITHUB_SHA:0:8}
          docker tag ml-app:${{ env.ENV }}-$SHA_SHORT ml-app:${{ env.ENV }}